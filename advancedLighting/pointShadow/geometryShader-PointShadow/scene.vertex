#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 textCoord;

// 定义输出interface block
out VS_OUT
{
	vec3 FragPos;
	vec2 TextCoord;
	vec3 FragNormal;
	// vec4 FragPosInLightSpace;	// 使用cubemap时不再需要这个vec4
}vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform bool reverse_normals; // 是否对法向量进行翻转

// uniform mat4 lightVPMatrix; // 使用cubemap时不再需要这个矩阵

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	vs_out.FragPos = vec3(model * vec4(position, 1.0)); // 在世界坐标系中指定片元位置
	vs_out.TextCoord = textCoord;
	// 计算法向量经过模型变换后值
	mat3 normalMatrix = mat3(transpose(inverse(model)));
	if(reverse_normals) // 当在立方体内部计算光照时 需要将法向量进行一个翻转
        vs_out.FragNormal = transpose(inverse(mat3(model))) * (-1.0 * normal);
    else
        vs_out.FragNormal = transpose(inverse(mat3(model))) * normal;
}