#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 textCoord;
layout(location = 2) in vec3 normal;

// 定义输出interface block
out VS_OUT
{
	vec3 FragPos;
	vec2 TextCoord;
	vec3 FragNormal;
	vec4 FragPosInLightSpace;	// 这里需要vec4
}vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 lightVPMatrix;

void main()
{
	gl_Position = projection * view * model * vec4(position, 1.0);
	vs_out.FragPos = vec3(model * vec4(position, 1.0)); // 在世界坐标系中指定片元位置
	vs_out.TextCoord = textCoord;
	mat3 normalMatrix = mat3(transpose(inverse(model)));
	vs_out.FragNormal = normalMatrix * normal; // 计算法向量经过模型变换后值
	vs_out.FragPosInLightSpace = lightVPMatrix * vec4(vs_out.FragPos, 1.0); // 在光源坐标系中的片元位置
}